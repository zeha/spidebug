#!/usr/bin/env python3

import json

print("// This file is generated by generate.py. DO NOT EDIT.")

def print_enum(basename, prefix=None):
    filename = 'data/' + basename + 's.json'
    if prefix is None:
        prefix = basename.lower()
    enum_name = (basename + 's').upper()
    f = open(filename,'r')
    data = json.load(f)
    print("enum " + enum_name + " {")
    for name,props in sorted(data.items(), key=lambda x: x[1]['id']):
        print("  {prefix}_{name} = {props[id]},".format(**locals()))
    print("};\n")
    f.close()

print_enum('serial_command', prefix='command')
print_enum('fault_reason', prefix='fault')
print_enum('error')
print_enum('production_state')
print_enum('component_state')

config_variables = json.load(open('data/config_variables.json','r'))
print("#ifdef IS_MAIN_PROGRAM")
for name,props in sorted(config_variables.items(), key=lambda x: x[1]['id']):
    print("  extern {props[type]}_t config_{name};".format(**locals()))
print("#else")
for name,props in sorted(config_variables.items(), key=lambda x: x[1]['id']):
    print("  {props[type]}_t config_{name} = {props[default]};".format(**locals()))
print("#endif")

print("#define MACRO_SET_CONF_VAR(conf_var_id, value) \\")
print("  switch(conf_var_id) { \\")
for name,props in sorted(config_variables.items(), key=lambda x: x[1]['id']):
    print("  case {props[id]}: config_{name} = value; break; \\".format(**locals()))
print(" }")
